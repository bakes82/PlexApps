@page "/library/{Server}/{LibraryKey}"
@using MoreLinq.Extensions
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using Microsoft.Extensions.Configuration
@using global::Plex.Api
@using global::Plex.Api.Models
@using PlexApps.Dto
@using PlexApps.Helpers
@using TraktNet.Objects.Get.Watched
@using TraktNet.Objects.Post.Syncs.History
@using TraktNet.Requests.Parameters
@using TraktNet.Responses
@using Syncfusion.Blazor.Notifications
@using TraktNet
@using TraktNet.Enums
@using TraktNet.Objects.Authentication
@using TraktNet.Objects.Get.Movies
@using TraktNet.Objects.Get.Users.Lists
@using FilterType = Syncfusion.Blazor.Grids.FilterType

@inject ProtectedLocalStorage ProtectedLocalStore
@inject IPlexClient PlexClient
@inject IConfiguration Configuration


<h1>Plex Library</h1>


<h2>@PlexLibraryInfo?.MediaContainer?.Title1</h2>


<SfTab CssClass="default-tab">
<TabItems>
<TabItem>
    <ChildContent>
        <TabHeader Text="Trakt Watch Compare"></TabHeader>
    </ChildContent>
    <ContentTemplate>
        <h3>(@NotMarkedPlex) Not Marked In Plex</h3>
        <h3>(@NotMarkedTrakt) Not Marked In Trakt</h3>
        @if (MoviesWatchedCompare != null && MoviesWatchedCompare.Any())
        {
            <SfGrid DataSource="@MoviesWatchedCompare" AllowSelection="false" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowPaging="true">
                <GridPageSettings PageSize="25" PageSizes="true"></GridPageSettings>
                <GridFilterSettings Type="@FilterType.Menu"></GridFilterSettings>
                <GridTemplates>
                    <DetailTemplate>
                        @{
                            var movie = context as MovieDto;
                            <div>
                                <table cellpadding="5" cellspacing="0" width="100%">
                                    <tbody>
                                    <tr>
                                        <td rowspan="4" style="border: 0px; width: 105px">
                                            @if (movie.Art.IsNotNullOrEmpty())
                                            {
                                                <img src="@movie.Art" width="76"/>
                                            }
                                            else
                                            {
                                                <img src="/images/empty_poster.jpg" width="76"/>
                                            }
                                        </td>
                                        <td style="border: 0px; white-space: normal;">
                                            <table width="100%">
                                                <thead>
                                                <tr>
                                                    <th style="border: 0px; width: 34%;">
                                                        Duration
                                                    </th>
                                                    <th style="border: 0px; width: 33%;">
                                                        Rating
                                                    </th>
                                                    <th style="border: 0px; width: 33%;">
                                                        IMDB
                                                    </th>
                                                </tr>
                                                </thead>
                                                <tbody>
                                                <tr>
                                                    <td style="border: 0px; width: 34%;">
                                                        @{ var time = TimeSpan.FromSeconds(movie.Duration.ToDouble()); }
                                                        @time.ToString(@"hh\:mm\:ss")
                                                    </td>
                                                    <td style="border: 0px; width: 33%;">
                                                        @movie.Rating
                                                    </td>
                                                    <td style="border: 0px; width: 33%;">
                                                        @movie.IMDB
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td style="border: 0px; white-space: normal; verical-align:top;" colspan="3">
                                                        @movie.Description
                                                    </td>
                                                </tr>
                                                </tbody>
                                            </table>
                                        </td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>
                        }
                    </DetailTemplate>
                </GridTemplates>
                <GridColumns>
                    <GridColumn Field=@nameof(MovieDto.Title) HeaderText="Title"></GridColumn>
                    <GridColumn Field=@nameof(MovieDto.Year) HeaderText="Year"></GridColumn>
                    <GridColumn Field=@nameof(MovieDto.PlexHas) HeaderText="In Library" Filter="@(new {type = "CheckBox"})" Width="150">
                        <Template>
                            @{
                                if (context is MovieDto movie && movie.PlexHas)
                                {
                                    <span class="badge badge-success">Yes</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger">No</span>
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(MovieDto.PlexWatched) HeaderText="Plex Watched" Filter="@(new {type = "CheckBox"})" Width="200">
                        <Template>
                            @{
                                var movie = context as MovieDto;
                                var watched = ((MovieDto) context).PlexWatched;
                            <SfCheckBox Disabled="true" Checked="@watched"></SfCheckBox>
                                @if (watched)
                                {
                                    <a class="form-check-label text-success" @onclick="async () => await PlexWatched(movie.PlexRatingKey, movie.Title)" href="javascript:void(0);">Mark Unwatched in Plex</a>
                                }
                                else
                                {
                                    if (!((MovieDto) context).PlexHas)
                                    {
                                        <label class="form-check-label text-danger">
                                            <span>Not In Library</span>
                                        </label>
                                    }
                                    else
                                    {
                                        <a class="form-check-label text-danger" @onclick="async () => await PlexWatched(movie.PlexRatingKey, movie.Title, true)" href="javascript:void(0);"> Mark Watched in Plex</a>
                                    }
                                }
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(MovieDto.TraktWatched) HeaderText="Trakt Watched" Filter="@(new {type = "CheckBox"})" Width="200">
                        <Template>
                            @{
                                var watched = ((MovieDto) context).TraktWatched;
                                var hasImdb = ((MovieDto) context).IMDB.IsNotNullOrEmpty();
                                var movie = context as MovieDto;
                            <SfCheckBox Disabled="true" Checked="@watched"></SfCheckBox>
                                @if (watched)
                                {
                                    if (hasImdb)
                                    {
                                        <a class="form-check-label text-success" @onclick="async () => await TraktWatched(movie.PlexRatingKey, movie.Title, movie.Year ?? 0, movie.IMDB)" href="javascript:void(0);">Mark Unwatched in Trakt</a>
                                    }
                                    else
                                    {
                                        <label class="form-check-label text-success">
                                            <span>Watched In Trakt</span>
                                        </label>
                                    }
                                }
                                else
                                {
                                    if (hasImdb)
                                    {
                                        <a class="form-check-label text-danger" @onclick="async () => await TraktWatched(movie.PlexRatingKey, movie.Title, movie.Year ?? 0, movie.IMDB, true)" href="javascript:void(0);"> Mark Watched in Trakt</a>
                                    }
                                    else
                                    {
                                        <label class="form-check-label text-danger">
                                            <span>Not Watched In Trakt</span>
                                        </label>
                                    }
                                }
                            }
                        </Template>
                    </GridColumn>

                </GridColumns>
            </SfGrid>
        }
    </ContentTemplate>
</TabItem>
<TabItem>
    <ChildContent>
        <TabHeader Text="Trakt Lists Compare"></TabHeader>
    </ChildContent>
    <ContentTemplate>
        <div class="col-lg-12">
            <div class="content-wrapper">
                <div class="row">
                    <SfTextBox Placeholder="URL" FloatLabelType="@FloatLabelType.Auto" @bind-Value="@TraktUrl"></SfTextBox>
                    <SfButton CssClass="e-success" @onclick="async () => await AddUrlToList()">Add Url</SfButton>
                    <SfListBox TValue="string[]" TItem="string" DataSource="@UriList" @ref="@_urlBox">
                        <ListBoxSelectionSettings ShowCheckbox="true" ShowSelectAll="true"></ListBoxSelectionSettings>
                    </SfListBox>
                    <SfButton IsPrimary="true" @onclick="async () => await GetTraktListDataCompareData()">Compare Selected Lists</SfButton>

                    @if (MoviesListCompare != null && MoviesListCompare.Any())
                    {
                        <SfGrid DataSource="@MoviesListCompare" AllowSelection="false" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" AllowPaging="true">
                            <GridPageSettings PageSize="25" PageSizes="true"></GridPageSettings>
                            <GridFilterSettings Type="@FilterType.Menu"></GridFilterSettings>
                            <GridColumns>
                                <GridColumn Field=@nameof(MovieDto.Title) HeaderText="Title"></GridColumn>
                                <GridColumn Field=@nameof(MovieDto.Year) HeaderText="Year"></GridColumn>
                                <GridColumn Field=@nameof(MovieDto.PlexHas) HeaderText="In Library" Filter="@(new {type = "CheckBox"})" Width="150">
                                    <Template>
                                        @{
                                            if (context is MovieDto movie && movie.PlexHas)
                                            {
                                                <span class="badge badge-success">Yes</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-danger">No</span>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                                <GridColumn Field=@nameof(MovieDto.PlexHas) HeaderText="Plex Watched" Filter="@(new {type = "CheckBox"})" Width="150">
                                    <Template>
                                        @{
                                            if (context is MovieDto movie && movie.PlexWatched)
                                            {
                                                <span class="badge badge-success">Yes</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-danger">No</span>
                                            }
                                        }
                                    </Template>
                                </GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                </div>
            </div>
        </div>
    </ContentTemplate>
</TabItem>
</TabItems>
</SfTab>

<SfToast @ref="@_toastObj">
    <ToastPosition X="Right"></ToastPosition>
</SfToast>

@functions {

    [Parameter]
    public string Server { get; set; }

    [Parameter]
    public string LibraryKey { get; set; }

    private PlexMediaContainer PlexLibraryInfo { get; set; }
    private List<MovieDto> MoviesWatchedCompare = new List<MovieDto>();
    private List<MovieDto> MoviesListCompare = new List<MovieDto>();
    List<ITraktWatchedMovie> TraktWatchedMovies { get; set; }
    private string PlexKey { get; set; }
    private string ServerUrl { get; set; }
    private string TraktKey { get; set; }
    private int NotMarkedPlex { get; set; }
    private int NotMarkedTrakt { get; set; }

    private readonly string[] UriList = {};
    private string TraktUrl { get; set; }

    SfListBox<string[], string> _urlBox;
    SfToast _toastObj;


    protected override async Task OnInitializedAsync()
    {
        PlexKey = await ProtectedLocalStore.GetAsync<string>("PlexKey");
        TraktKey = await ProtectedLocalStore.GetAsync<string>("TraktKey");

        var servers = await PlexClient.GetResources(PlexKey);
        ServerUrl = (servers.SingleOrDefault(x => x.ClientIdentifier == Server)?.Connections ??
                     throw new InvalidOperationException()).FirstOrDefault(y => y.Protocol == "https" && y.Local == "0")
            ?.Uri;

        await GetLibraryInfo();
        TraktWatchedMovies = await GetTraktWatchedMovies();
        await GetMoviesWatchedCompareData();
    }

    private async Task AddUrlToList()
    {
        if (TraktUrl.IsNullOrEmpty()) return;

        await _urlBox.RemoveItems(TraktUrl);
        await _urlBox.AddItems(TraktUrl);
        TraktUrl = string.Empty;
    }

    private async Task GetTraktListDataCompareData()
    {
        var urls = _urlBox.Value?.ToList();
        var traktListFields = new List<TraktListFields>();

        if (urls == null)
        {
            
            await _toastObj.Show(new ToastModel
            {
                Title = "Warning!",
                Content = "No list to check.",
                CssClass = "e-toast-warning",
                Icon = "e-danger toast-icons",
                TimeOut = 5000
            });
        }

        if (urls != null)
            foreach (var url in urls)
            {
                var userLists = TraktHelpers.TraktListUriParse(url);

                if (userLists == null || userLists.Username.IsNullOrEmpty() || userLists.ListName.IsNullOrEmpty())
                {
                    MoviesListCompare = new List<MovieDto>();

                    await _toastObj.Show(new ToastModel
                    {
                        Title = "Error!",
                        Content = $"Can not parse user name or list from uri {url}",
                        CssClass = "e-toast-danger",
                        Icon = "e-danger toast-icons",
                        TimeOut = 15000
                    });
                }

                if (userLists != null) traktListFields.Add(new TraktListFields {Username = userLists.Username, ListName = userLists.ListName});
            }

        var clientId = Configuration["Trakt:ClientId"];
        var clientSecret = Configuration["Trakt:ClientSecret"];
        var traktClient = new TraktClient(clientId, clientSecret)
        {
            Authorization = TraktAuthorization.CreateWith(TraktKey)
        };

        var items = new List<TraktPagedResponse<ITraktListItem>>();
        foreach (var list in traktListFields)
        {
            items.AddRange(await traktClient.Users.GetCustomListItemsAsync(list.Username, list.ListName));
        }

        MoviesListCompare = new List<MovieDto>();

        var plexMovies = PlexLibraryInfo.MediaContainer.Metadata;

        foreach (var traktPagedResponse in items)
        {
            foreach (var traktListItem in traktPagedResponse.Value)
            {
                if (traktListItem.Type == TraktListItemType.Movie)
                {
                    var plexHas = PlexHelpers.PlexHasItem(plexMovies, traktListItem.Movie.Title, traktListItem.Movie.Ids.Imdb, traktListItem.Movie.Year ?? 0);
                    var plexWatched = PlexHelpers.PlexWatchedItem(plexMovies, traktListItem.Movie.Title, traktListItem.Movie.Ids.Imdb, traktListItem.Movie.Year ?? 0);
                    MoviesListCompare.Add(new MovieDto
                    {
                        Title = traktListItem.Movie.Title,
                        Description = plexHas != null ? plexHas.Summary : traktListItem.Movie.Overview,
                        TraktHas = true,
                        Year = traktListItem.Movie.Year,
                        IMDB = traktListItem.Movie.Ids.Imdb,
                        PlexHas = plexHas != null,
                        PlexWatched = plexWatched != null,
                        Duration = plexHas != null
                            ? (plexHas.Duration / 1000).ToString()
                            : (traktListItem.Movie.Runtime ?? 0 * 60).ToString(),
                        Rating = plexHas != null ? plexHas.ContentRating : traktListItem.Movie.Certification,
                        PlexRatingKey = plexHas != null ? plexHas.RatingKey : string.Empty,
                        Art = plexHas != null ? ServerUrl + plexHas.Thumb + "?X-Plex-Token=" + PlexKey : string.Empty
                    });
                }
            }
        }

        MoviesListCompare = MoviesListCompare.DistinctBy(x => x.IMDB).ToList();
    }

    private async Task GetMoviesWatchedCompareData()
    {
        MoviesWatchedCompare = new List<MovieDto>();

        var plexMovies = PlexLibraryInfo.MediaContainer.Metadata;

        foreach (var traktWatchedMovie in TraktWatchedMovies)
        {
            var plexHasItem = PlexHelpers.PlexHasItem(plexMovies, traktWatchedMovie.Title, traktWatchedMovie.Ids.Imdb, traktWatchedMovie.Year ?? 0);
            var plexWatchedItem = PlexHelpers.PlexWatchedItem(plexMovies, traktWatchedMovie.Title, traktWatchedMovie.Ids.Imdb, traktWatchedMovie.Year ?? 0);

            if (plexHasItem != null)
            {
                plexMovies.Remove(plexHasItem);
            }

            MoviesWatchedCompare.Add(new MovieDto
            {
                Title = traktWatchedMovie.Title,
                Year = traktWatchedMovie.Year.HasValue ? traktWatchedMovie.Year.Value : 0,
                TraktHas = true,
                TraktWatched = true,
                PlexHas = plexHasItem != null && plexHasItem.Title.IsNotNullOrEmpty(),
                PlexWatched = plexWatchedItem != null && plexWatchedItem.Title.IsNotNullOrEmpty(),
                Description = plexHasItem != null ? plexHasItem.Summary : traktWatchedMovie.Movie.Overview,
                Art = plexHasItem != null ? ServerUrl + plexHasItem.Thumb + "?X-Plex-Token=" + PlexKey : string.Empty,
                IMDB = traktWatchedMovie.Ids.Imdb,
                Duration = plexHasItem != null
                    ? (plexHasItem.Duration / 1000).ToString()
                    : (traktWatchedMovie.Runtime ?? 0 * 60).ToString(),
                Rating = plexHasItem != null ? plexHasItem.ContentRating : traktWatchedMovie.Movie.Certification,
                PlexRatingKey = plexHasItem != null ? plexHasItem.RatingKey : string.Empty
            });
        }

        foreach (var plexMovie in plexMovies)
        {
            MoviesWatchedCompare.Add(new MovieDto
            {
                Title = plexMovie.Title,
                Year = plexMovie.Year,
                TraktHas = false,
                TraktWatched = false,
                PlexHas = true,
                PlexWatched = plexMovie.ViewCount > 0,
                Description = plexMovie.Summary,
                Art = ServerUrl + plexMovie.Thumb + "?X-Plex-Token=" + PlexKey,
                IMDB = plexMovie.ExternalProvider.ToUpper() == "IMDB" ? plexMovie.ExternalProviderId : string.Empty,
                Duration = (plexMovie.Duration / 1000).ToString(),
                Rating = plexMovie.ContentRating,
                PlexRatingKey = plexMovie.RatingKey
            });
        }

        UpdateNotMarked();
    }

    protected async Task<List<ITraktWatchedMovie>> GetTraktWatchedMovies()
    {
        var clientId = Configuration["Trakt:ClientId"];
        var clientSecret = Configuration["Trakt:ClientSecret"];
        var traktClient = new TraktClient(clientId, clientSecret)
        {
            Authorization = TraktAuthorization.CreateWith(TraktKey)
        };

        var data = (await traktClient.Sync.GetWatchedMoviesAsync(new TraktExtendedInfo().SetFull())).ToList();
        return data;
    }

    private async Task GetLibraryInfo()
    {
        PlexLibraryInfo = await PlexClient.GetMetadataForLibrary(PlexKey, ServerUrl, LibraryKey);
    }

    private void UpdateNotMarked()
    {
        NotMarkedTrakt = (MoviesWatchedCompare.Count(x => x.PlexWatched && x.PlexHas) - MoviesWatchedCompare.Count(x => x.TraktWatched && x.PlexHas)).ToInt32() < 0 ? 0 : (MoviesWatchedCompare.Count(x => x.PlexWatched && x.PlexHas) - MoviesWatchedCompare.Count(x => x.TraktWatched && x.PlexHas)).ToInt32();
        NotMarkedPlex = (MoviesWatchedCompare.Count(x => x.TraktWatched && x.PlexHas) - MoviesWatchedCompare.Count(x => x.PlexWatched && x.PlexHas)).ToInt32() < 0 ? 0 : (MoviesWatchedCompare.Count(x => x.TraktWatched && x.PlexHas) - MoviesWatchedCompare.Count(x => x.PlexWatched && x.PlexHas)).ToInt32();
    }

    private async Task PlexWatched(string key, string title, bool markWatched = false)
    {
        var watched = markWatched ? "watched" : "unwatched";

        try
        {
            if (markWatched)
            {
                await PlexClient.ScrobbleItem(PlexKey, ServerUrl, key);
            }
            else
            {
                await PlexClient.UnScrobbleItem(PlexKey, ServerUrl, key);
            }

            await _toastObj.Show(new ToastModel
            {
                Title = "Success!",
                Content = $"An tem with the title of '{title}' has been marked {watched} successfully in plex!",
                CssClass = "e-toast-success",
                Icon = "e-success toast-icons",
                TimeOut = 5000
            });

            MoviesWatchedCompare.SingleOrDefault(x => x.PlexRatingKey == key).PlexWatched = markWatched;

            UpdateNotMarked();
        }
        catch (Exception ex)
        {
            await _toastObj.Show(new ToastModel
            {
                Title = "Error!",
                Content = $"An tem with the title of '{title}' had an error {ex.Message}!",
                CssClass = "e-toast-danger",
                Icon = "e-danger toast-icons",
                TimeOut = 15000
            });
        }
    }

    private async Task TraktWatched(string key, string title, int year, string imdb, bool markWatched = false)
    {
        var watched = markWatched ? "watched" : "unwatched";

        var clientId = Configuration["Trakt:ClientId"];
        var clientSecret = Configuration["Trakt:ClientSecret"];
        var traktClient = new TraktClient(clientId, clientSecret)
        {
            Authorization = TraktAuthorization.CreateWith(TraktKey)
        };

        try
        {
            if (markWatched)
            {
                var traktSyncHistoryPostMovies = new TraktSyncHistoryPostBuilder();

                traktSyncHistoryPostMovies.AddMovie(new TraktMovie
                {
                    Title = title
                    , Year = year
                    , Ids = new TraktMovieIds
                    {
                        Imdb = imdb
                    }
                }, DateTime.UtcNow);

                var payload = traktSyncHistoryPostMovies.Build();
                await traktClient.Sync.AddWatchedHistoryItemsAsync(payload);
            }
            else
            {
                var traktSyncHistoryPostMovies = new TraktSyncHistoryRemovePostBuilder();

                traktSyncHistoryPostMovies.AddMovie(new TraktMovie
                {
                    Title = title
                    , Year = year
                    , Ids = new TraktMovieIds
                    {
                        Imdb = imdb
                    }
                });

                var payload = traktSyncHistoryPostMovies.Build();
                await traktClient.Sync.RemoveWatchedHistoryItemsAsync(payload);
            }

            await _toastObj.Show(new ToastModel
            {
                Title = "Success!",
                Content = $"An tem with the title of '{title}' has been marked {watched} successfully in Trakt!",
                CssClass = "e-toast-success",
                Icon = "e-success toast-icons",
                TimeOut = 5000
            });

            MoviesWatchedCompare.SingleOrDefault(x => x.PlexRatingKey == key).TraktWatched = markWatched;

            UpdateNotMarked();
        }
        catch (Exception ex)
        {
            await _toastObj.Show(new ToastModel
            {
                Title = "Error!",
                Content = $"An tem with the title of '{title}' had an error {ex.Message}!",
                CssClass = "e-toast-danger",
                Icon = "e-danger toast-icons",
                TimeOut = 15000
            });
        }
    }

}